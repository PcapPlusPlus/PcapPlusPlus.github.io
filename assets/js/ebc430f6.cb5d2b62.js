"use strict";(self.webpackChunkpcapplusplus_github_io=self.webpackChunkpcapplusplus_github_io||[]).push([[4169],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),k=r,u=c["".concat(o,".").concat(k)]||c[k]||d[k]||s;return a?n.createElement(u,i(i({ref:t},m),{},{components:a})):n.createElement(u,i({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<s;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1054:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7294),r=a(2232);const s=function(e){let{relativePath:t,children:a}=e;return n.createElement("a",{href:(0,r.E2)()+t},a)}},2232:(e,t,a)=>{a.d(t,{E2:()=>d,K7:()=>l,Wx:()=>m,hv:()=>s,kq:()=>i,rU:()=>c,s6:()=>o,u$:()=>p,vR:()=>k});var n=a(143);const r="https://github.com/seladb/PcapPlusPlus";function s(){return r}function i(){const e=(0,n.yW)(),t=(0,n.zu)();return"Next"===t.label?e.label:t.label}function l(e){return`${r}/releases/tag/${e}`}function o(){return l(i())}function p(){return`${r}/archive/${i()}.zip`}function m(){return`${r}/archive/${i()}.tar.gz`}function d(){const e=(0,n.zu)(),t="Next"===e.label?"master":e.label;return`${r}/tree/${t}`}function c(){return`${r}/archive/master.zip`}function k(){return`${r}/archive/master.tar.gz`}},5033:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(7462),r=(a(7294),a(3905)),s=a(1054);const i={title:"Running Tests",sidebar_position:10},l="Running PcapPlusPlus Tests",o={unversionedId:"tests",id:"version-v23.09/tests",title:"Running Tests",description:"PcapPlusPlus source code contains a set of test-cases you can run to make sure everything works correctly on your system.",source:"@site/versioned_docs/version-v23.09/tests.mdx",sourceDirName:".",slug:"/tests",permalink:"/docs/v23.09/tests",draft:!1,editUrl:"https://github.com/PcapPlusPlus/pcapplusplus.github.io/edit/master/versioned_docs/version-v23.09/tests.mdx",tags:[],version:"v23.09",sidebarPosition:10,frontMatter:{title:"Running Tests",sidebar_position:10},sidebar:"docs",previous:{title:"Benchmarks",permalink:"/docs/v23.09/benchmark"},next:{title:"API Reference",permalink:"/docs/v23.09/api"}},p={},m=[{value:"Packet++Test",id:"packettest",level:2},{value:"Some more technical details",id:"some-more-technical-details",level:3},{value:"Pcap++Test",id:"pcaptest",level:2},{value:"Some more technical details",id:"some-more-technical-details-1",level:3},{value:"ExamplesTest",id:"examplestest",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Setup",id:"setup",level:3},{value:"Running the tests",id:"running-the-tests",level:3}],d={toc:m};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-pcapplusplus-tests"},"Running PcapPlusPlus Tests"),(0,r.kt)("p",null,"PcapPlusPlus source code contains a set of test-cases you can run to make sure everything works correctly on your system."),(0,r.kt)("p",null,"These test-cases are divided into three separate projects:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[PCAPPPLUSPLUS_HOME]/Tests/Packet++Test")," - contains test-cases for the ",(0,r.kt)("inlineCode",{parentName:"li"},"Packet++")," library"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[PCAPPPLUSPLUS_HOME]/Tests/Pcap++Test")," - contains test-cases (mostly) for the ",(0,r.kt)("inlineCode",{parentName:"li"},"Pcap++")," library"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[PCAPPPLUSPLUS_HOME]/Tests/ExamplesTest")," - contains test-cases for PcapPlusPlus examples")),(0,r.kt)("p",null,"When you build PcapPlusPlus these projects are also built. The following sections contain information on how to run the test-cases:"),(0,r.kt)("h2",{id:"packettest"},"Packet++Test"),(0,r.kt)("p",null,"This project contains test-cases that mostly test the ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++")," library, meaning testing the functionality of parsing and crafting packets of different protocols."),(0,r.kt)("p",null,"After a successful build you can run these test-cases by following these simple steps:"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The steps below are shown on Linux but apply in the same way to all supported platforms")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++Test")," directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus$ cd Tests/Packet++Test/\nseladb@seladb:~/PcapPlusPlus/Tests/Packet++Test$\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run the tests from this directory. The executable is inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"Bin")," directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/Packet++Test$ Bin/Packet++Test\nPcapPlusPlus version: ... (official release)\nBuilt: MMM DD YYYY 02:36:16\nBuilt from: Git branch 'master', commit '8b2d721fdaaa6af516494d96f032e10264d7bf56'\nStart running tests...\n\nEthPacketCreation             : PASSED\nEthPacketPointerCreation      : PASSED\nEthAndArpPacketParsing        : PASSED\nArpPacketCreation             : PASSED\nVlanParseAndCreation          : PASSED\nIpv4PacketCreation            : PASSED\n...\n...\n...\nALL TESTS PASSED!!\nTest cases: 92, Passed: 92, Failed: 0, Skipped: 0\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Hopefully if all tests pass you'll see a message at the end saying ",(0,r.kt)("inlineCode",{parentName:"p"},"ALL TESTS PASSED!!")," and the number of test-cases that passed, skipped or failed. You'll also see next to each test-case whether it has passed or failed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If a test-case failed you'll see an appropriate assert message explaining what caused the failure, for example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/Packet++Test$ Bin/Packet++Test\nPcapPlusPlus version: ... (official release)\nBuilt: MMM DD YYYY 02:44:35\nBuilt from: Git branch 'master', commit '8b2d721fdaaa6af516494d96f032e10264d7bf56'\nStart running tests...\n\nEthPacketCreation             : PASSED\nEthPacketPointerCreation      : PASSED\nEthAndArpPacketParsing        : PASSED\nArpPacketCreation             : FAILED (line: 245). assert equal failed: actual: 42 != expected: 43\nVlanParseAndCreation          : PASSED\nIpv4PacketCreation            : PASSED\n...\n...\n...\nNOT ALL TESTS PASSED!!\nTest cases: 92, Passed: 91, Failed: 1, Skipped: 0\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Please note that it's very important to run the tests from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tests/Packet++Test")," directory (using ",(0,r.kt)("inlineCode",{parentName:"p"},"Bin/Packet++Test"),") because the test-cases are using packet examples that reside in ",(0,r.kt)(s.Z,{relativePath:"/Tests/Packet%2B%2BTest/PacketExamples",mdxType:"CodeLink"},"Tests/Packet++Test/PacketExamples")," and are assuming the running directory is ",(0,r.kt)("inlineCode",{parentName:"p"},"Tests/Packet++Test")))),(0,r.kt)("h3",{id:"some-more-technical-details"},"Some more technical details"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The folder structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++Test")," is as follows (showing only relevant folders):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},"|- Bin/\n|- PacketExamples/\n|- Tests/\n   |- BgpTests.cpp\n   |- DhcpTests.cpp\n   |- DnsTests.cpp\n   |- ...\n   |- ...\n|- Utils/\n|- main.cpp\n|- CMakeLists.txt\n|- TestDefinition.h\n|- ...\n|- ...\n")),(0,r.kt)("p",{parentName:"li"},"The test-cases are gathered under the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tests/")," folder. Each file in this folder contains a few test-cases which belong to a specific protocol or subject."),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PacketExamples/")," folder contains packet examples used by the various test-cases."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Bin/")," contains the executable."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Utils/")," contains a few methods commonly used by the test-cases."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"TestDefinition.h")," contains a definition of all the test-cases and ",(0,r.kt)("inlineCode",{parentName:"p"},"main.cpp")," is in charge of parsing command-line arguments and running the tests.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each test-case resides in one of the ",(0,r.kt)("inlineCode",{parentName:"p"},".cpp")," files under ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++Test/Tests/")," and has the following definition:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"PTF_TEST_CASE(GtpLayerParsingTest)\n{\n    ...\n    ...\n}\n")),(0,r.kt)("p",{parentName:"li"},"In addition this test needs to be declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++Test/TestDefinition.h"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"...\n...\n// Implemented in GtpTests.cpp\nPTF_TEST_CASE(GtpLayerParsingTest);\n...\n...\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In addition to the functional tests described in each test-case there is also a memory leak test that is being performed for each test-case separately. The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/seladb/MemPlumber"},"MemPlumber")," library is being used to detect memory leaks. If a memory leak is detected the test-case will fail with an appropriate assert message")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each test-case has one or more tags assigned to it. The tags are defined when calling each test-case in ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++Test/main.cpp"),". For example: ",(0,r.kt)("inlineCode",{parentName:"p"},'PTF_RUN_TEST(EthPacketCreation, "eth")'),' has the tag "eth" assigned to it, while ',(0,r.kt)("inlineCode",{parentName:"p"},'PTF_RUN_TEST(SipResponseLayerCreationTest, "sip")'),' has the "sip" tag assigned to it. In addition there is a default tag assigned to each test-case which is its name. This mechanism allows running specific tests instead of always running all of them. There is a command-line switch ',(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"-t"))," or ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"--tags"))," which enables running only tests that are assigned to specific tags. You should provide it a list of tags (one or more) separated by a semicolon and surrounded by quotes."),(0,r.kt)("p",{parentName:"li"},'For example, the following command will run only tests that have the "',(0,r.kt)("inlineCode",{parentName:"p"},"eth"),'" tag assigned to them:'),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/Packet++Test$ Bin/Packet++Test -t \"eth\"\nPcapPlusPlus version: ... (official release)\nBuilt: MMM DD YYYY 03:19:34\nBuilt from: Git branch 'master', commit '8b2d721fdaaa6af516494d96f032e10264d7bf56'\nStart running tests...\n\nEthPacketCreation             : PASSED\nEthPacketPointerCreation      : PASSED\nEthAndArpPacketParsing        : PASSED\nEthDot3LayerParsingTest       : PASSED\nEthDot3LayerCreateEditTest    : PASSED\n\nALL TESTS PASSED!!\nTest cases: 92, Passed: 5, Failed: 0, Skipped: 87\n")),(0,r.kt)("p",{parentName:"li"},"As you can see 5 test-cases matched the ",(0,r.kt)("inlineCode",{parentName:"p"},"eth")," tag and the rest of them (87) were skipped and are not showing on the report."),(0,r.kt)("p",{parentName:"li"},'This command will run only test-cases which have "',(0,r.kt)("inlineCode",{parentName:"p"},"eth"),'" or "',(0,r.kt)("inlineCode",{parentName:"p"},"ipv6"),'" tags assigned to them:'),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/Packet++Test$ Bin/Packet++Test -t \"eth;ipv6\"\nPcapPlusPlus version: ... (official release)\nBuilt: MMM DD YYYY 03:19:34\nBuilt from: Git branch 'master', commit '8b2d721fdaaa6af516494d96f032e10264d7bf56'\nStart running tests...\n\nEthPacketCreation             : PASSED\nEthPacketPointerCreation      : PASSED\nEthAndArpPacketParsing        : PASSED\nEthDot3LayerParsingTest       : PASSED\nEthDot3LayerCreateEditTest    : PASSED\nIPv6UdpPacketParseAndCreate   : PASSED\nIPv6FragmentationTest         : PASSED\nIPv6ExtensionsTest            : PASSED\n\nALL TESTS PASSED!!\nTest cases: 92, Passed: 8, Failed: 0, Skipped: 84\n")),(0,r.kt)("p",{parentName:"li"},'This command will run only the "',(0,r.kt)("inlineCode",{parentName:"p"},"ArpPacketCreation"),'" test-case:'),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/Packet++Test$ Bin/Packet++Test -t \"ArpPacketCreation\"\nPcapPlusPlus version: ... (official release)\nBuilt: MMM DD YYYY 03:19:34\nBuilt from: Git branch 'master', commit '8b2d721fdaaa6af516494d96f032e10264d7bf56'\nStart running tests...\n\nArpPacketCreation             : PASSED\n\nALL TESTS PASSED!!\nTest cases: 92, Passed: 1, Failed: 0, Skipped: 91\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Here are all of the command-line switches available for ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++Test"),":"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-t")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--include-tags"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A list of semicolon separated tags for tests to run")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-x")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--exclude-tags"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A list of semicolon separated tags for tests to exclude")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-w")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--show-skipped-tests"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Show tests that are skipped. By default they are hidden in the final report")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-v")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--verbose"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run in verbose mode which emits more output in several test-cases")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--mem-verbose"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Output verbose information on all memory allocations and releases done throughout the test-cases. This can be useful to detect memory leaks")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-s")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--skip-mem-leak-check"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Skip memory leak test for all test-cases")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-h")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--help"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Shows a help screen with the available command-line switches")))))),(0,r.kt)("h2",{id:"pcaptest"},"Pcap++Test"),(0,r.kt)("p",null,"This project contains test-cases that mostly test for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pcap++")," library, meaning testing the functionality of capturing and sending network packets, reading and writing to files, DPDK functionality, PF_RING and more. It also contains tests for massive packet parsing, TCP reassembly and IP de/fragmentation."),(0,r.kt)("p",null,"After a successful build you can run these test-cases by following these simple steps:"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The steps below are shown on Linux but apply in the same way to all supported platforms")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make sure that network traffic is flowing to the device you're running the tests on. This is important because some of the test-cases assume incoming packets. There is also an option to run only test-cases that don't rely on live traffic using the ",(0,r.kt)("inlineCode",{parentName:"p"},"-n")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-networking")," command-line switch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Pcap++Test")," directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus$ cd Tests/Pcap++Test/\nseladb@seladb:~/PcapPlusPlus/Tests/Pcap++Test$\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run the tests from this directory. The executable is inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"Bin")," directory. If you're running with live traffic there is a mandatory command-line switch you need to provide \"",(0,r.kt)("inlineCode",{parentName:"p"},"-i"),'" or "',(0,r.kt)("inlineCode",{parentName:"p"},"--use-ip"),"\" which is the IP address of the interface you'd like the test suite to use for capturing and sending network traffic. Make sure that network traffic is flowing to that interface:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/Pcap++Test$ sudo Bin/Pcap++Test -i 10.0.0.1\nPcapPlusPlus version: ... (official release)\nBuilt: MMM DD YYYY 02:36:38\nGit info: Git branch 'master', commit '8b2d721fdaaa6af516494d96f032e10264d7bf56'\nUsing ip: 10.0.0.1\nDebug mode: off\nStart running tests...\n\nTestIPAddress                 : PASSED\nTestMacAddress                : PASSED\nTestLRUList                   : PASSED\nTestGeneralUtils              : PASSED\nTestGetMacAddress             : PASSED\nTestPcapFileReadWrite         : PASSED\n...\n...\nALL TESTS PASSED!!\nTest cases: 65, Passed: 50, Failed: 0, Skipped: 15\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Notice that on Linux and MacOS you might need to run with ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Hopefully if all test cases pass you'll see a message at the end saying ",(0,r.kt)("inlineCode",{parentName:"p"},"ALL TESTS PASSED!!")," and the number of test-cases that passed, skipped or failed. You\u2019ll also see next to each test-case whether it has passed or failed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If a test-case failed you'll see an appropriate assert message explaining what caused the failure, for example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/Pcap++Test$ sudo Bin/Pcap++Test -i 10.1.1.1\nPcapPlusPlus version: ... (official release)\nBuilt: MMM DD YYYY 02:36:38\nGit info: Git branch 'master', commit '8b2d721fdaaa6af516494d96f032e10264d7bf56'\nUsing ip: 10.1.1.1\nDebug mode: off\nStarting tests...\nStart running tests...\n\nTestIPAddress                 : PASSED\nTestLRUList                   : PASSED\nTestPcapFileReadWrite         : PASSED\n..\n..\nTestPcapLiveDeviceList        : PASSED\nTestPcapLiveDeviceListSearch  : FAILED. assertion failed: Device used in this test 10.1.1.1 doesnt exist\n..\n..\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Please note that it's very important to run the tests from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tests/Pcap++Test")," directory (using ",(0,r.kt)("inlineCode",{parentName:"p"},"Bin/Pcap++Test"),") because the test-cases are using packet examples that reside in ",(0,r.kt)(s.Z,{relativePath:"/Tests/Pcap%2B%2BTest/PcapExamples",mdxType:"CodeLink"},"Tests/Pcap++Test/PcapExamples")," and are assuming the running directory is ",(0,r.kt)("inlineCode",{parentName:"p"},"Tests/Pcap++Test"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you're building PcapPlusPlus with DPDK there is an additional mandatory command-line parameter which is \"",(0,r.kt)("inlineCode",{parentName:"p"},"-k"),'" or "',(0,r.kt)("inlineCode",{parentName:"p"},"--dpdk-port"),'" where you need to provide the DPDK port to use for the tests. This port is simply a number starting from 0, so if you have only one interface assigned to DPDK the port number will be 0. If you have two interfaces assigned to DPDK then you can choose either 0 or 1, and so on. Please make sure there is network traffic flowing to this interface'))),(0,r.kt)("h3",{id:"some-more-technical-details-1"},"Some more technical details"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The folder structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"Pcap++Test")," is as follows (showing only relevant folders):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},"|- Bin/\n|- Common/\n|- PcapExamples/\n|- Tests/\n   |- DpdkTests.cpp\n   |- FileTests.cpp\n   |- FilterTests.cpp\n   |- ...\n   |- ...\n|- main.cpp\n|- CMakeLists.txt\n|- TestDefinition.h\n|- ...\n|- ...\n")),(0,r.kt)("p",{parentName:"li"},"The test-cases are gathered under the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tests/")," folder. Each file in this folder contains a few test-cases which belong to a specific subject."),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PcapExamples/")," folder contains pcap files used by the various test-cases."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Bin/")," contains the executable."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Common/")," contains a few methods commonly used by the test-cases."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"TestDefinition.h")," contains a definition of all the test-cases and ",(0,r.kt)("inlineCode",{parentName:"p"},"main.cpp")," is in charge of parsing command-line arguments and running the tests.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each test-case resides in one of the ",(0,r.kt)("inlineCode",{parentName:"p"},".cpp")," files under ",(0,r.kt)("inlineCode",{parentName:"p"},"Pcap++Test/Tests/")," and has the following definition:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"PTF_TEST_CASE(TestPcapLiveDevice)\n{\n    ...\n    ...\n}\n")),(0,r.kt)("p",{parentName:"li"},"In addition this test needs to be declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"Pcap++Test/TestDefinition.h"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"...\n...\n// Implemented in GtpTests.cpp\nPTF_TEST_CASE(TestPcapLiveDevice);\n...\n...\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In addition to the functional tests described in each test-case there is also a memory leak test that is being performed for each test-case separately. The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/seladb/MemPlumber"},"MemPlumber")," library is being used to detect memory leaks. If a memory leak is detected the test-case will fail with an appropriate assert message")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"There is a tag mechanism which is similar to the one implemented in ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet++Test"),". Please refer to ",(0,r.kt)("a",{parentName:"p",href:"#some-more-technical-details"},"the section")," to learn more about this functionality")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Here are all of the command-line switches available for ",(0,r.kt)("inlineCode",{parentName:"p"},"Pcap++Test"),":"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-i")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--use-ip"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"IP address to use for sending and receiving packets. It's a mandatory parameter when running the tests with live network traffic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-d")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--debug-mode"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set log level to DEBUG for all test-cases")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-r")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--remote-ip"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"IPv4 address of remote machine running rpcapd to test remote capture (currently relevant only for Windows). If not provided then the IPv4 address provided in ",(0,r.kt)("inlineCode",{parentName:"td"},"-i")," switch will be used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-p")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--remote-port"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Port of remote machine running rpcapd to test remote capture (currently relevant only for Windows). If not provided the default port is ",(0,r.kt)("inlineCode",{parentName:"td"},"12321"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-k")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--dpdk-port"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The DPDK NIC port to use. Required only if compiling with DPDK")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-a")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--kni-ip"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"IPv4 address for the KNI device test-cases. Relevant only for Linux systems and if compiling with DPDK and KNI. Must not be the same as any of existing network interfaces in your system. If this parameter is omitted KNI tests will be skipped")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-n")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--no-networking"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Do not run tests that requires networking")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-t")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--include-tags"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A list of semicolon separated tags for tests to run")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-x")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--exclude-tags"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A list of semicolon separated tags for tests to exclude")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-w")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--show-skipped-tests"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Show tests that are skipped. By default they are hidden in the final report")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-v")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--verbose"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run in verbose mode which emits more output in several test-cases")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--mem-verbose"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Output verbose information on all memory allocations and releases done throughout the test-cases. This can be useful to detect memory leaks")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-s")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--skip-mem-leak-check"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Skip memory leak test for all test-cases")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-t")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--tags"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases that match specific tags. The tag list should be separated by semicolons and surrounded by apostrophes, for example: ",(0,r.kt)("inlineCode",{parentName:"td"},'Bin/Pcap++Test -t "live_device;pf_ring;TestDpdkDevice"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-h")),", ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--help"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Shows a help screen with the available command-line switches")))))),(0,r.kt)("h2",{id:"examplestest"},"ExamplesTest"),(0,r.kt)("p",null,"This project is quite different and unique from the other two in various ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It doesn't test any parts of the PcapPlusPlus library but rather the ",(0,r.kt)("a",{parentName:"li",href:"./examples"},"example apps")," that are provided with the library"),(0,r.kt)("li",{parentName:"ul"},"It doesn't test the apps code but rather runs them as executables and inspects their output (stdout, generated files, etc.)"),(0,r.kt)("li",{parentName:"ul"},'This project isn\'t written in C++ but rather in Python. The reason is that Python is much more "user-friendly" when it comes to running executables and inspect their output; its file and string manipulation options are much more comprehensive and advanced. You can write very little code and achieve a lot. Python also has great testing frameworks that come out-of-the-box. It is the obvious choice for these kind of tasks')),(0,r.kt)("p",null,"Because this project is written in Python it has different requirements and setup/run procedures. First we'll go over the requirements, then we'll dive into the setup and finally we'll show how to run the tests and explore the command-line options available."),(0,r.kt)("h3",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This project requires ",(0,r.kt)("a",{parentName:"li",href:"https://www.python.org/downloads/"},"Python 3.7")," or newer. It won't run on Python 2.7.x"),(0,r.kt)("li",{parentName:"ul"},"It has dependencies on other Python libraries described in ",(0,r.kt)(s.Z,{relativePath:"/Tests/ExamplesTest/requirements.txt",mdxType:"CodeLink"},(0,r.kt)("inlineCode",{parentName:"li"},"requirements.txt")),". In the next section we'll go into the details of how to install them")),(0,r.kt)("h3",{id:"setup"},"Setup"),(0,r.kt)("p",null,"This section describes the steps to get to a working setup:"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The steps below are shown on Linux but apply in the same way to all supported platforms")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make sure you have Python 3.7 or newer. You can check the version using the ",(0,r.kt)("inlineCode",{parentName:"p"},"-V")," command line option:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~$ python3 -V\nPython 3.8.2\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go into the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExamplesTest")," directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~$ cd PcapPlusPlus/Tests/ExamplesTest\nseladb@seladb:~/PcapPlusPlus/Tests/ExamplesTest$\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you'd like to use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/venv.html"},"venv/virtualenv")," (which is usually recommended in Python) create the virtual environment and activate it:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"seladb@seladb:~/PcapPlusPlus/Tests/ExamplesTest$ python3 -m venv venv\nseladb@seladb:~/PcapPlusPlus/Tests/ExamplesTest$ source venv/bin/activate\n(venv) seladbseladb:~/PcapPlusPlus/Tests/ExamplesTest$\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Install the dependencies described in ",(0,r.kt)(s.Z,{relativePath:"/Tests/ExamplesTest/requirements.txt",mdxType:"CodeLink"},(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt")),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"(venv) seladb@seladb:~/PcapPlusPlus/Tests/ExamplesTest$ python3 -m pip install -r requirements.txt\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Since this test suite simply runs the app executables make sure you have a ",(0,r.kt)("a",{parentName:"p",href:"./install#build-from-source"},"working build of PcapPlusPlus")," and that the executables are under ",(0,r.kt)("inlineCode",{parentName:"p"},"[PcapPlusPlus-Home]/Dist/examples")))),(0,r.kt)("h3",{id:"running-the-tests"},"Running the tests"),(0,r.kt)("p",null,"Once you have a working setup running the tests is pretty easy:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(venv) seladbseladb:~/PcapPlusPlus/Tests/ExamplesTest$ python3 -m pytest\n")),(0,r.kt)("p",null,"Here is the output you might see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"============== test session starts ===============\nplatform linux -- Python 3.8.2, pytest-5.4.3, py-1.9.0, pluggy-0.13.1\nrootdir: /home/seladb/PcapPlusPlus/Tests/ExamplesTest, inifile: pytest.ini\ncollected 57 items\n\ntests/test_arping.py ss.s                  [  7%]\ntests/test_dnsresolver.py x..s             [ 14%]\ntests/test_httpanalyzer.py ...             [ 19%]\ntests/test_ipdefragutil.py ......          [ 29%]\ntests/test_ipfragutil.py .......           [ 42%]\ntests/test_pcapprinter.py ....             [ 49%]\ntests/test_pcapsearch.py ........          [ 63%]\ntests/test_pcapsplitter.py ............... [ 89%]\ntests/test_sslanalyzer.py ..               [ 92%]\ntests/test_tcpreassembly.py ....           [100%]\n\n=== 52 passed, 4 skipped, 1 xfailed in 16.06s ====\n")),(0,r.kt)("p",null,"This output shows how many test-cases passed, how many failed and how many were skipped or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.pytest.org/en/latest/skipping.html"},"xfailed"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As you can see currently not all of the example apps are covered. This is because some of them are difficult to test by just running the executable and need a more complex setup. In the future we'll consider increasing the coverage")),(0,r.kt)("p",null,"This project uses ",(0,r.kt)("a",{parentName:"p",href:"https://docs.pytest.org/"},"pytest")," which is one of the most popular test frameworks for Python. It has many features and options that will not be covered in this guide, but here are the options that are most relevant for this project:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Option"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--use-sudo"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Some of the tests rely on live network traffic and need access to a network interface. On Linux and MacOS this may require ",(0,r.kt)("inlineCode",{parentName:"td"},"sudo")," privileges. If this flag is set the test-cases will use ",(0,r.kt)("inlineCode",{parentName:"td"},"sudo")," to run the relevant executables. If ",(0,r.kt)("inlineCode",{parentName:"td"},"sudo")," is required and this flag is not set these tests may fail")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--interface [interface-ip]"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Required only for tests who rely on live network traffic and need the network interface IP address to use. If this parameter is not provided these tests will be skipped")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--gateway [gateway_ip]"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A small set of tests need the default gateway IP address. If this parameter is not provided these tests will be skipped")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m [marker]"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"pytest has this concept of ",(0,r.kt)("a",{parentName:"td",href:"https://docs.pytest.org/en/stable/mark.html"},"markers")," which is like tagging tests with metadata. This project uses it to tag test-cases by app or those who need/don't need network traffic. The markers relevant to this project are described in the next table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--markers"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Show a list of all the markers available (not all of them are specific to this project)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"--help"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Show all of ",(0,r.kt)("inlineCode",{parentName:"td"},"pytest")," command-line options")))),(0,r.kt)("p",null,"Here are the markers that are relevant to this project:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Marker"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m no_network"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases that don't require live network traffic. This is very useful for environments where live traffic is not available or if you prefer to run tests that don't interact with the network. The test-cases which require network traffic will be skipped")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m pcapprinter"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#pcapprinter"},"PcapPrinter"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m ipdefragutil"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#ipdefragutil"},"IPDefragUtil"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m ipfragutil"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#ipfragutil"},"IPFragUtil"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m dnsresolver"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#dnsresolver"},"DNSResolver"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m tcpreassembly"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#tcpreassembly"},"TcpReassembly"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m httpanalyzer"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#httpanalyzer"},"HttpAnalyzer"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m sslanalyzer"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#sslanalyzer"},"SSLAnalyzer"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m pcapsearch"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#pcapsearch"},"PcapSearch"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m arping"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#arping"},"Arping"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"-m pcapsplitter"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Run only test-cases for ",(0,r.kt)("a",{parentName:"td",href:"./examples#pcapsplitter"},"PcapSplitter"))))))}c.isMDXComponent=!0}}]);