"use strict";(self.webpackChunkpcapplusplus_github_io=self.webpackChunkpcapplusplus_github_io||[]).push([[2794],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=o(a),h=r,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||s;return a?n.createElement(m,l(l({ref:t},d),{},{components:a})):n.createElement(m,l({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var o=2;o<s;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1054:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7294),r=a(2232);const s=function(e){let{relativePath:t,children:a}=e;return n.createElement("a",{href:(0,r.E2)()+t},a)}},2232:(e,t,a)=>{a.d(t,{E2:()=>c,K7:()=>i,Wx:()=>d,hv:()=>s,kq:()=>l,rU:()=>u,s6:()=>p,u$:()=>o,vR:()=>h});var n=a(143);const r="https://github.com/seladb/PcapPlusPlus";function s(){return r}function l(){const e=(0,n.yW)(),t=(0,n.zu)();return"Next"===t.label?e.label:t.label}function i(e){return`${r}/releases/tag/${e}`}function p(){return i(l())}function o(){return`${r}/archive/${l()}.zip`}function d(){return`${r}/archive/${l()}.tar.gz`}function c(){const e=(0,n.zu)(),t="Next"===e.label?"master":e.label;return`${r}/tree/${t}`}function u(){return`${r}/archive/master.zip`}function h(){return`${r}/archive/master.tar.gz`}},9536:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),s=a(1054);const l={sidebar_position:4},i="Part 4: Packet Parsing",p={unversionedId:"tutorials/packet-parsing",id:"tutorials/packet-parsing",title:"Part 4: Packet Parsing",description:"Introduction",source:"@site/docs/tutorials/packet-parsing.mdx",sourceDirName:"tutorials",slug:"/tutorials/packet-parsing",permalink:"/docs/next/tutorials/packet-parsing",draft:!1,editUrl:"https://github.com/PcapPlusPlus/pcapplusplus.github.io/edit/master/docs/tutorials/packet-parsing.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Part 3: Capture/Send Packets",permalink:"/docs/next/tutorials/capture-packets"},next:{title:"Part 5: Packet Crafting",permalink:"/docs/next/tutorials/packet-crafting"}},o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Packet parsing basics",id:"packet-parsing-basics",level:2},{value:"Parsing Ethernet",id:"parsing-ethernet",level:2},{value:"Parsing IPv4",id:"parsing-ipv4",level:2},{value:"Parsing TCP",id:"parsing-tcp",level:2},{value:"Parsing HTTP",id:"parsing-http",level:2},{value:"Running the code",id:"running-the-code",level:2},{value:"Option 1: Install a pre-compiled version of PcapPlusPlus",id:"option-1-install-a-pre-compiled-version-of-pcapplusplus",level:3}],c={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"part-4-packet-parsing"},"Part 4: Packet Parsing"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Packet parsing, editing and crafting are a major part of PcapPlusPlus and is the essence of the Packet++ library. There is a long list of ",(0,r.kt)("a",{parentName:"p",href:"../features#supported-network-protocols"},"protocols currently supported"),", each of them is represented by a ",(0,r.kt)("inlineCode",{parentName:"p"},"Layer")," class which (in most cases) supports both parsing of the protocol, editing and creation of new layers from scratch."),(0,r.kt)("p",null,"This tutorial will go through the packet parsing fundamentals and the next tutorial will focus on packet crafting and editing. The tutorial demonstrate parsing on a few popular protocols:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ethernet"),(0,r.kt)("li",{parentName:"ul"},"IPv4"),(0,r.kt)("li",{parentName:"ul"},"TCP"),(0,r.kt)("li",{parentName:"ul"},"HTTP")),(0,r.kt)("p",null,"For further information about these protocols and the other protocols supported in PcapPlusPlus please go to the ",(0,r.kt)("a",{parentName:"p",href:"../api"},"API documentation")),(0,r.kt)("h2",{id:"packet-parsing-basics"},"Packet parsing basics"),(0,r.kt)("p",null,"In this tutorial we'll read a packet from a pcap file, let PcapPlusPlus parse it, and see how we can retrieve data from each layer. Let's start by writing a ",(0,r.kt)("inlineCode",{parentName:"p"},"main()")," method and add the includes that we need:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <memory>\n#include "stdlib.h"\n#include "SystemUtils.h"\n#include "Packet.h"\n#include "EthLayer.h"\n#include "IPv4Layer.h"\n#include "TcpLayer.h"\n#include "HttpLayer.h"\n#include "PcapFileDevice.h"\n\nint main(int argc, char* argv[])\n{\n    // We\'ll write our code here\n}\n')),(0,r.kt)("p",null,"As you can see we added an include to ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet.h")," which contains the basic parsed packet structures, to ",(0,r.kt)("inlineCode",{parentName:"p"},"PcapFileDevice.h")," which contains the API for reading from pcap files and to all of the layers which we want to retrieve information from. In addition we included ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemUtils.h")," for using ",(0,r.kt)("inlineCode",{parentName:"p"},"netToHost16()")," which we'll use later."),(0,r.kt)("p",null,"Now let's read the packet from the pcap file. This pcap file contains only 1 packet, so we'll open the reader, read the packet and close the reader:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// use the IFileReaderDevice interface to automatically identify file type (pcap/pcap-ng)\n// and create an interface instance that both readers implement\nstd::unique_ptr<pcpp::IFileReaderDevice> reader(pcpp::IFileReaderDevice::getReader("1_http_packet.pcap"));\n\n// verify that a reader interface was indeed created\nif (reader == nullptr)\n{\n    std::cerr << "Cannot determine reader for file type" << std::endl;\n    return 1;\n}\n\n// open the reader for reading\nif (!reader->open())\n{\n    std::cerr << "Cannot open input.pcap for reading" << std::endl;\n    return 1;\n}\n\n// read the first (and only) packet from the file\npcpp::RawPacket rawPacket;\nif (!reader->getNextPacket(rawPacket))\n{\n    std::cerr << "Couldn\'t read the first packet in the file" << std::endl;\n    return 1;\n}\n\n// close the file reader, we don\'t need it anymore\nreader->close();\n')),(0,r.kt)("p",null,"The next step is to let PcapPlusPlus parse the packet. We do this by creating an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet")," class and giving it in the constructor a pointer to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RawPacket")," instance we have:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// parse the raw packet into a parsed packet\npcpp::Packet parsedPacket(&rawPacket);\n")),(0,r.kt)("p",null,"Before we dive into the protocols, let's remember how the ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet")," class is ",(0,r.kt)("a",{parentName:"p",href:"./intro#packets-and-layers"},"built"),": it contains a link list of ",(0,r.kt)("inlineCode",{parentName:"p"},"Layer")," instances, each layer points to the next layer in the packet. In our example: Ethernet layer will be the first one, it will point to IPv4 layer which will point to TCP layer and finally we'll have HTTP request layer. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet")," class exposes this link list so we can iterate over the layers and retrieve basic information like the protocols they represent, sizes, etc. Let's see the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// first let\'s go over the layers one by one and find out its type, its total length, its header length and its payload length\nfor (auto* curLayer = parsedPacket.getFirstLayer(); curLayer != nullptr; curLayer = curLayer->getNextLayer())\n{\n    std::cout\n        << "Layer type: " << getProtocolTypeAsString(curLayer->getProtocol()) << "; " // get layer type\n        << "Total data: " << curLayer->getDataLen() << " [bytes]; " // get total length of the layer\n        << "Layer data: " << curLayer->getHeaderLen() << " [bytes]; " // get the header length of the layer\n        << "Layer payload: " << curLayer->getLayerPayloadSize() << " [bytes]" // get the payload length of the layer (equals total length minus header length)\n        << std::endl;\n}\n')),(0,r.kt)("p",null,"As you can see, we're using the ",(0,r.kt)("inlineCode",{parentName:"p"},"getFirstLayer()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getNextLayer()")," APIs to iterate over the layers. In each layer we have the following information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getProtocol()")," - get an enum of the protocol the layer represents"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getHeaderLen()")," - get the size of the layer's header, meaning the size of the layer data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getLayerPayloadSize()")," - get the size of the layer's payload, meaning the size of all layers that follows this layer"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getDataLen()")," - get the total size of the layer: header + payload")),(0,r.kt)("p",null,"For printing the protocols I used a simple function that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"ProtocolType")," enum and returns a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string getProtocolTypeAsString(pcpp::ProtocolType protocolType)\n{\n    switch (protocolType)\n    {\n    case pcpp::Ethernet:\n        return "Ethernet";\n    case pcpp::IPv4:\n        return "IPv4";\n    case pcpp::TCP:\n        return "TCP";\n    case pcpp::HTTPRequest:\n    case pcpp::HTTPResponse:\n        return "HTTP";\n    default:\n        return "Unknown";\n    }\n}\n')),(0,r.kt)("p",null,"Let's see the output so far:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Layer type: Ethernet; Total data: 443 [bytes]; Layer data: 14 [bytes]; Layer payload: 429 [bytes]\nLayer type: IPv4; Total data: 429 [bytes]; Layer data: 20 [bytes]; Layer payload: 409 [bytes]\nLayer type: TCP; Total data: 409 [bytes]; Layer data: 32 [bytes]; Layer payload: 377 [bytes]\nLayer type: HTTP; Total data: 377 [bytes]; Layer data: 377 [bytes]; Layer payload: 0 [bytes]\n")),(0,r.kt)("h2",{id:"parsing-ethernet"},"Parsing Ethernet"),(0,r.kt)("p",null,"Now let's see what information we can get from the first layer in this packet: ",(0,r.kt)("inlineCode",{parentName:"p"},"EthLayer"),". First let's get a pointer to this layer. We can use the methods we used before and cast the ",(0,r.kt)("inlineCode",{parentName:"p"},"Layer*")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"EthLayer*")," but the ",(0,r.kt)("inlineCode",{parentName:"p"},"Packet")," class offers a more convenient way to do that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// now let's get the Ethernet layer\nauto* ethernetLayer = parsedPacket.getLayerOfType<pcpp::EthLayer>();\nif (ethernetLayer == nullptr)\n{\n    std::cerr << \"Something went wrong, couldn't find Ethernet layer\" << std::endl;\n    return 1;\n}\n")),(0,r.kt)("p",null,"As you can see we used the templated method ",(0,r.kt)("inlineCode",{parentName:"p"},"getLayerOfType<pcpp::EthLayer>()")," which returns a pointer to ",(0,r.kt)("inlineCode",{parentName:"p"},"EthLayer")," if exists in the packet or NULL otherwise. Now we are ready to start getting some information. The Ethernet layer is quite simple so there's not much information we can get. We can basically get the source and destination MAC addresses and the Ether Type of the next layer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// print the source and dest MAC addresses and the Ether type\nstd::cout << std::endl\n    << "Source MAC address: " << ethernetLayer->getSourceMac() << std::endl\n    << "Destination MAC address: " << ethernetLayer->getDestMac() << std::endl\n    << "Ether type = 0x" << std::hex << pcpp::netToHost16(ethernetLayer->getEthHeader()->etherType) << std::endl;\n')),(0,r.kt)("p",null,"For getting the source and destination MAC addresses ",(0,r.kt)("inlineCode",{parentName:"p"},"EthLayer")," exposes methods which return an instance of type ",(0,r.kt)("inlineCode",{parentName:"p"},"MacAddress")," which encapsulates MAC addresses and provides helper function such as print the MAC address as a nice string (like we have in our code example). For getting the Ether Type we call ",(0,r.kt)("inlineCode",{parentName:"p"},"getEthHeader()")," which casts the raw packet bytes into a struct: ",(0,r.kt)("inlineCode",{parentName:"p"},"ether_header*")," and we can read the Ether Type from this struct. Since packet raw data is stored in network order, we need to convert the Ether Type value from network to host order using ",(0,r.kt)("inlineCode",{parentName:"p"},"netToHost16()")),(0,r.kt)("p",null,"The output is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Source MAC address: 00:50:43:01:4d:d4\nDestination MAC address: 00:90:7f:3e:02:d0\nEther type = 0x800\n")),(0,r.kt)("h2",{id:"parsing-ipv4"},"Parsing IPv4"),(0,r.kt)("p",null,"Now let's get the IPv4 layer, we'll do it in the same way as before using the template ",(0,r.kt)("inlineCode",{parentName:"p"},"getLayerOfType<pcpp::IPv4Layer>()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// let's get the IPv4 layer\nauto* ipLayer = parsedPacket.getLayerOfType<pcpp::IPv4Layer>();\nif (ipLayer == nullptr)\n{\n    std::cerr << \"Something went wrong, couldn't find IPv4 layer\" << std::endl;\n    return 1;\n}\n")),(0,r.kt)("p",null,"Let's get some information from the ",(0,r.kt)("inlineCode",{parentName:"p"},"IPv4Layer"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// print source and dest IP addresses, IP ID and TTL\nstd::cout << std::endl\n    << "Source IP address: " << ipLayer->getSrcIPAddress() << std::endl\n    << "Destination IP address: " << ipLayer->getDstIPAddress() << std::endl\n    << "IP ID: 0x" << std::hex << pcpp::netToHost16(ipLayer->getIPv4Header()->ipId) << std::endl\n    << "TTL: " << std::dec << (int)ipLayer->getIPv4Header()->timeToLive << std::endl;\n')),(0,r.kt)("p",null,"As you can see this layer exposes 2 methods for reading the source and destination IP addresses in an easy-to-use wrapper class called ",(0,r.kt)("inlineCode",{parentName:"p"},"IPv4Address"),". This class provides various capabilities, one of them is printing the IP address as a string. Next, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getIPv4Header()")," method which casts the raw packet bytes to a struct called ",(0,r.kt)("inlineCode",{parentName:"p"},"iphdr*")," and we can retrieve the rest of the data from there. Since the packet data is in network order, we need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"netToHost16()")," when getting data larger than 1 byte (like when reading the IP ID)."),(0,r.kt)("p",null,"Here is the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Source IP address: 172.16.133.132\nDestination IP address: 98.139.161.29\nIP ID: 0x36E4\nTTL: 64\n")),(0,r.kt)("h2",{id:"parsing-tcp"},"Parsing TCP"),(0,r.kt)("p",null,"Let's get the TCP layer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// let's get the TCP layer\nauto* tcpLayer = parsedPacket.getLayerOfType<pcpp::TcpLayer>();\nif (tcpLayer == nullptr)\n{\n    std::cerr << \"Something went wrong, couldn't find TCP layer\" << std::endl;\n    return 1;\n}\n")),(0,r.kt)("p",null,"Now let's get the TCP data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// print TCP source and dest ports, window size, and the TCP flags that are set in this layer\nstd::cout << std::endl\n    << "Source TCP port: " << tcpLayer->getSrcPort() << std::endl\n    << "Destination TCP port: " << tcpLayer->getDstPort() << std::endl\n    << "Window size: " << pcpp::netToHost16(tcpLayer->getTcpHeader()->windowSize) << std::endl\n    << "TCP flags: " << printTcpFlags(tcpLayer) << std::endl;\n')),(0,r.kt)("p",null,"The TCP layer exposes two methods: ",(0,r.kt)("inlineCode",{parentName:"p"},"getPortSrc()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getPortDst()")," to fetch the source and destination ports. It also exposes the method ",(0,r.kt)("inlineCode",{parentName:"p"},"getTcpHeader()")," to cast the raw packet data into a struct ",(0,r.kt)("inlineCode",{parentName:"p"},"tpchdr*")," which contains all of the TCP fields. That way we can fetch additional fields such as windows size etc. Notice the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"netToHost16()")," to convert the data from network to host byte order as the raw packet arrives in network order. I also wrote a small function that gathers all of the TCP flags on the packet and prints them nicely:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string printTcpFlags(pcpp::TcpLayer* tcpLayer)\n{\n    std::string result;\n    auto* tcpHeader = tcpLayer->getTcpHeader();\n    if (tcpHeader->synFlag) result += "SYN ";\n    if (tcpHeader->ackFlag) result += "ACK ";\n    if (tcpHeader->pshFlag) result += "PSH ";\n    if (tcpHeader->cwrFlag) result += "CWR ";\n    if (tcpHeader->urgFlag) result += "URG ";\n    if (tcpHeader->eceFlag) result += "ECE ";\n    if (tcpHeader->rstFlag) result += "RST ";\n    if (tcpHeader->finFlag) result += "FIN ";\n    return result;\n}\n')),(0,r.kt)("p",null,"Another cool feature ",(0,r.kt)("inlineCode",{parentName:"p"},"TcpLayer")," provides is retrieving information about the TCP options (if exist). We can iterate the TCP options using the methods ",(0,r.kt)("inlineCode",{parentName:"p"},"getFirstTcpOption()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getNextTcpOption(tcpOption)")," and extract all the information on the TCP option such as type, length and value. In our example let's iterate over them and print their type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// go over all TCP options in this layer and print its type\nstd::cout << "TCP options: ";\nfor (pcpp::TcpOption tcpOption = tcpLayer->getFirstTcpOption(); tcpOption.isNotNull(); tcpOption = tcpLayer->getNextTcpOption(tcpOption))\n{\n    std::cout << printTcpOptionType(tcpOption.getTcpOptionType()) << " ";\n}\nstd::cout << std::endl;\n')),(0,r.kt)("p",null,"Let's see the method that gets the TCP option type as enum and converts it to string. Notice this method handles only the TCP options we have on the specific packet we're parsing, PcapPlusPlus support all TCP options types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string printTcpOptionType(pcpp::TcpOptionType optionType)\n{\n    switch (optionType)\n    {\n    case pcpp::PCPP_TCPOPT_NOP:\n        return "NOP";\n    case pcpp::PCPP_TCPOPT_TIMESTAMP:\n        return "Timestamp";\n    default:\n        return "Other";\n    }\n}\n')),(0,r.kt)("h2",{id:"parsing-http"},"Parsing HTTP"),(0,r.kt)("p",null,"Finally, let's see the capabilities ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestLayer")," has to offer. First let's extract the layer from the packet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// let's get the HTTP request layer\nauto* httpRequestLayer = parsedPacket.getLayerOfType<pcpp::HttpRequestLayer>();\nif (httpRequestLayer == nullptr)\n{\n    std::cerr << \"Something went wrong, couldn't find HTTP request layer\" << std::endl;\n    return 1;\n}\n")),(0,r.kt)("p",null,"Of course there is a similar class ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpResponseLayer")," for HTTP responses."),(0,r.kt)("p",null,"HTTP messages (both requests and responses) have 3 main parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first line (also known as request-line or status-line) which includes the HTTP version, HTTP method (for requests) or status code (for responses) and the URI (for requests)"),(0,r.kt)("li",{parentName:"ul"},"Message headers which include all header fields (e.g host, user-agent, cookie, content-type etc.)"),(0,r.kt)("li",{parentName:"ul"},"Message body")),(0,r.kt)("p",null,"The HTTP layer classes provide access to all of these parts. Let's start with showing how to get data from the first line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// print HTTP method and URI. Both appear in the first line of the HTTP request\nstd::cout << std::endl\n    << "HTTP method: " << printHttpMethod(httpRequestLayer->getFirstLine()->getMethod()) << std::endl\n    << "HTTP URI: " << httpRequestLayer->getFirstLine()->getUri() << std::endl;\n')),(0,r.kt)("p",null,"As you can see the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestLayer")," class exposes a getter (",(0,r.kt)("inlineCode",{parentName:"p"},"getFirstLine()"),") that retrieves an object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestFirstLine")," that contain all of the first-line data: method, URI,etc. The method is returned as an enum so I added a simple function ",(0,r.kt)("inlineCode",{parentName:"p"},"printHttpMethod")," to print it as a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string printHttpMethod(pcpp::HttpRequestLayer::HttpMethod httpMethod)\n{\n    switch (httpMethod)\n    {\n    case pcpp::HttpRequestLayer::HttpGET:\n        return "GET";\n    case pcpp::HttpRequestLayer::HttpPOST:\n        return "POST";\n    default:\n        return "Other";\n    }\n}\n')),(0,r.kt)("p",null,"Now let's see how to get header fields data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// print values of the following HTTP field: Host, User-Agent and Cookie\nstd::cout\n    << "HTTP host: " << httpRequestLayer->getFieldByName(PCPP_HTTP_HOST_FIELD)->getFieldValue() << std::endl\n    << "HTTP user-agent: " << httpRequestLayer->getFieldByName(PCPP_HTTP_USER_AGENT_FIELD)->getFieldValue() << std::endl\n    << "HTTP cookie: " << httpRequestLayer->getFieldByName(PCPP_HTTP_COOKIE_FIELD)->getFieldValue() << std::endl;\n')),(0,r.kt)("p",null,"The HTTP request and response layers exposes a method ",(0,r.kt)("inlineCode",{parentName:"p"},"getFieldByName()")," to get a header field data by it's name. The class representing a field is called ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpField")," and has some interesting API, but probably the most important method for parsing is ",(0,r.kt)("inlineCode",{parentName:"p"},"getFieldValue()")," which returns the value of this header field as string. Please notice that I didn't write the header field names as strings but rather used a macro defined in PcapPlusPlus for some of the most useful HTTP fields (like host, cookie, user-agent, etc.)."),(0,r.kt)("p",null,"Finally, let's see another cool method in ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestLayer")," which is ",(0,r.kt)("inlineCode",{parentName:"p"},"getURL()"),' that forms and returns the full URL from the request (including host-name from "Host" header field + URI from the request-line):'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// print the full URL of this request\nstd::cout << "HTTP full URL: " << httpRequestLayer->getUrl() << std::endl;\n')),(0,r.kt)("p",null,"Now let's see the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"HTTP method: GET\nHTTP URI: /serv?s=19190039&t=1361916157&f=us-p9h3\nHTTP host: geo.yahoo.com\nHTTP user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10\nHTTP cookie: B=fdnulql8iqc6l&b=3&s=ps\nHTTP full URL: geo.yahoo.com/serv?s=19190039&t=1361916157&f=us-p9h3\n")),(0,r.kt)("h2",{id:"running-the-code"},"Running the code"),(0,r.kt)("p",null,"All code that was covered in this tutorial can be found ",(0,r.kt)(s.Z,{relativePath:"/Examples/Tutorials/Tutorial-PacketParsing",mdxType:"CodeLink"},"here"),". In order to compile and run the code please choose one of these options:"),(0,r.kt)("h3",{id:"option-1-install-a-pre-compiled-version-of-pcapplusplus"},"Option 1: Install a pre-compiled version of PcapPlusPlus"),(0,r.kt)("p",null,"You can download and install PcapPlusPlus using one of the options mentioned in the ",(0,r.kt)("a",{parentName:"p",href:"../install"},"installation page"),"."),(0,r.kt)("p",null,"Once installed, download all of the files in the ",(0,r.kt)(s.Z,{relativePath:"/Examples/Tutorials/Tutorial-PacketParsing",mdxType:"CodeLink"},"tutorial folder")," and run CMake:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cmake -S . -B build\ncmake --build build\n")),(0,r.kt)("p",null,"The executable will be created in the same directory."),(0,r.kt)("admonition",{title:"Notes:",type:"tip"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"If you're running on Windows with MinGW you need to run cmake with ",(0,r.kt)("inlineCode",{parentName:"li"},'-G "MinGW Makefiles"')),(0,r.kt)("li",{parentName:"ol"},"If PcapPlusPlus is ",(0,r.kt)("strong",{parentName:"li"},"NOT")," installed in the default directory you may need to specify ",(0,r.kt)("inlineCode",{parentName:"li"},"CMAKE_PREFIX_PATH"),", for example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"CMAKE_PREFIX_PATH=/my/pcapplusplus/path cmake -S . -B build\n")),"Or on Windows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"set CMAKE_PREFIX_PATH=C:\\my\\pcapplusplus\\path\ncmake -S . -B build\n"))),(0,r.kt)("li",{parentName:"ol"},"On Windows you may also need to specify Npcap/WinPcap path in ",(0,r.kt)("inlineCode",{parentName:"li"},"CMAKE_PREFIX_PATH"),", for example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"set CMAKE_PREFIX_PATH=C:\\my\\pcapplusplus\\path;C:\\my\\npcap\\path\ncmake -S . -B build\n")),":::")),(0,r.kt)("h3",{parentName:"admonition",id:"option-2-build-the-tutorials-with-pcapplusplus"},"Option 2: build the tutorials with PcapPlusPlus"),(0,r.kt)("p",{parentName:"admonition"},"If you're building PcapPlusPlus from source and would like to build the tutorials as well you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"-DPCAPPP_BUILD_TUTORIALS=ON")," option.\nPlease refer to the ",(0,r.kt)("a",{parentName:"p",href:"../install#build-from-source"},"build from source page")," for more details (choose your platform page).")))}u.isMDXComponent=!0}}]);